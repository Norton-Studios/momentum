model Tenant {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  users                   User[]
  tenantDataSourceConfigs TenantDataSourceConfig[]
  dataSourceRuns          DataSourceRun[]
  onboardingProgress      OnboardingProgress?
  mergeRequests           MergeRequest[]
  pipelines               Pipeline[]
  builds                  Build[]
  buildSteps              BuildStep[]
  mergeRequestCommits     MergeRequestCommit[]

  @@map("tenant")
  @@schema("core")
}

model User {
  id            String    @id @default(cuid())
  tenantId      String    @map("tenant_id")
  email         String    @unique
  fullName      String?   @map("full_name")
  password      String?
  apiToken      String    @unique @map("api_token")
  isAdmin       Boolean   @default(false) @map("is_admin")
  // SSO fields
  ssoProvider   String?   @map("sso_provider")
  ssoProviderId String?   @map("sso_provider_id")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  sessions UserSession[]

  @@unique([ssoProvider, ssoProviderId])
  @@index([tenantId])
  @@index([email])
  @@index([apiToken])
  @@map("user")
  @@schema("core")
}

model TenantDataSourceConfig {
  id         String   @id @default(cuid())
  tenantId   String   @map("tenant_id")
  dataSource String   @map("data_source")
  instanceId String?  @map("instance_id")
  key        String
  value      String
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([tenantId, dataSource, instanceId, key])
  @@index([tenantId])
  @@map("tenant_data_source_config")
  @@schema("core")
}

// Data source import run tracking
model DataSourceRun {
  id                   String                @id @default(cuid())
  tenantId             String                @map("tenant_id")
  dataSource           String                @map("data_source") // name of the data source (e.g., "github-repository")
  startedAt            DateTime              @default(now()) @map("started_at")
  completedAt          DateTime?             @map("completed_at")
  status               DataSourceRunStatus   @default(RUNNING)
  error                String?
  lastFetchedDataDate  DateTime?             @map("last_fetched_data_date") // tracks the latest data point collected
  
  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  
  @@map("data_source_run")
  @@index([tenantId])
  @@index([dataSource])
  @@index([startedAt])
  @@schema("core")
}

model OnboardingProgress {
  id             String   @id @default(cuid())
  tenantId       String   @unique @map("tenant_id")
  currentStep    String   @map("current_step")
  completedSteps Json     @map("completed_steps")
  wizardData     Json     @map("wizard_data")
  completed      Boolean  @default(false)
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")
  
  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  
  @@map("onboarding_progress")
  @@schema("core")
}

model UserSession {
  id           String   @id @default(cuid())
  userId       String   @map("user_id")
  sessionToken String   @unique @map("session_token")
  sessionData  Json     @map("session_data")
  expiresAt    DateTime @map("expires_at")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([sessionToken])
  @@index([expiresAt])
  @@map("user_session")
  @@schema("core")
}

enum DataSourceRunStatus {
  RUNNING
  COMPLETED
  FAILED
  
  @@schema("core")
}